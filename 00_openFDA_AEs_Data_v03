# 00_openFDA_AEs_Data_v03
# Author: Alberto Bejarano (2025)
# This script queries the FDA Adverse Event Reporting System (FAERS) API to retrieve and analyze adverse events associated
# with a curated list of drugs, including synonyms defined in a dictionary. It handles batching, safe retries, and structured
# parsing of seriousness outcomes (e.g., death, hospitalization). The results are normalized, aggregated by drug and adverse
# event, and saved to a CSV file for downstream analysis. The script also supports testing via hardcoded drug inputs, outputs
# summary statistics, and optionally plays a notification chime upon completion.

import requests, os, time
from datetime import datetime
from IPython.display import Audio, display
from tqdm import tqdm
import pandas as pd

# Start timer
start = time.time()
print(datetime.now().strftime("%B %d, %Y %H:%M:%S"))

# Options
pd.options.display.float_format = '{:.2f}'.format
pd.options.display.max_columns = 200

# Constants
total_records = 50000
batch_size = 1000
api_fda_url = "https://api.fda.gov/drug/event.json"

# File paths
input_drug_list_file_path = "./data/drugs_of_interest.txt"
output_drug_list_file_path = "./data/drugs_of_interest_extended.txt"
drug_dict_file_path = "./data/drug_dictionary.xlsx"
aes_output_file = "./data/AEs_drugs_of_interest.csv"

# Load dictionary and create nested list
nested_list = []
dictionary_df = pd.read_excel(drug_dict_file_path)
for _, row in dictionary_df.iterrows():
    drug_name = row['Drug_Name'].strip().replace('\xa0', "").lower()
    other_names = []
    if pd.notna(row['Other_Drug_Names']):
        other_names = [name.strip().replace('\xa0', "").lower() for name in row['Other_Drug_Names'].split(', ')]
    nested_list.append([drug_name] + other_names)

# === TEST MODE ===
use_test_values = True  # Toggle this

if use_test_values:
    drugs_of_interest = ['5-FU']
    drugs_of_interest_extended = ['5-FU', '5-Fu', 'S-fu', 'Fluorouracil', '5-fluorouracil']
    print('\n[TEST MODE ENABLED]')
else:
    with open(input_drug_list_file_path, 'r') as f:
        drugs_of_interest = [line.strip() for line in f.readlines()]

    drugs_of_interest_extended = []
    for drug in drugs_of_interest:
        matched = False
        for sublist in nested_list:
            if drug.lower() in sublist:
                drugs_of_interest_extended.extend(sublist)
                matched = True
                break
        if not matched:
            drugs_of_interest_extended.append(drug)

    with open(output_drug_list_file_path, 'w') as f:
        for term in drugs_of_interest_extended:
            f.write(f"{term}\n")

print(f"\nOriginal drugs: {drugs_of_interest}")
print(f"Extended drugs: {drugs_of_interest_extended}")

# Safe request function
def safe_request(api_fda_url, params, retries=3, delay=1):
    for i in range(retries):
        try:
            response = requests.get(api_fda_url, params=params, timeout=30)
            if response and response.status_code == 200:
                return response
        except requests.exceptions.ReadTimeout:
            time.sleep(delay)
        except requests.exceptions.RequestException:
            break
    return None

# Fetch data
all_records = []
for drug_name in tqdm(drugs_of_interest_extended):
    for skip in range(0, total_records, batch_size):
        params = {
            "search": f"patient.drug.medicinalproduct:{drug_name}",
            "limit": batch_size,
            "skip": skip
        }
        response = safe_request(api_fda_url, params)
        if not response:
            continue

        results = response.json().get("results", [])
        if not results:
            print(f"No data returned for batch {skip}.")
            continue

        for result in results:
            seriousness = {
                "Death": int(result.get("seriousnessdeath", 0)),
                "Hospitalization": int(result.get("seriousnesshospitalization", 0)),
                "LifeThreatening": int(result.get("seriousnesslifethreatening", 0)),
                "Other": int(result.get("seriousnessother", 0))
            }
            for reaction in result.get("patient", {}).get("reaction", []):
                record = {
                    "Drug_Name": drug_name,
                    "Adverse_Event": reaction.get("reactionmeddrapt", "Unknown"),
                    **seriousness
                }
                all_records.append(record)

# Convert to DataFrame
print(f"\nNumber of records: {len(all_records)}")
df = pd.DataFrame(all_records)
df['Drug_Name'] = df['Drug_Name'].str.title()
df['Adverse_Event'] = df['Adverse_Event'].str.title()

# Normalize names
alias_to_primary = {}
for sublist in nested_list:
    primary = sublist[0]
    for alias in sublist:
        alias_to_primary[alias] = primary

df['Drug_Name'] = df['Drug_Name'].str.lower().map(alias_to_primary).fillna(df['Drug_Name'])
unique_drugs = df['Drug_Name'].unique().tolist()
print(f"\nUnique drug names after alias replacement: {set(unique_drugs)}")

# Differences
diff = [item for item in drugs_of_interest_extended if alias_to_primary.get(item.lower(), item.lower()) not in unique_drugs]
if diff:
    print(f"\n\033[32mUnmapped drugs:\033[0m {', '.join(sorted(diff))}")

# AE list
adverse_event_list = df['Adverse_Event'].unique().tolist()
print(f"\nNumber of different AEs found: {len(adverse_event_list)}")
print(f"\033[32mSample AEs:\033[0m {sorted(adverse_event_list[:10])}")

with open("./data/adverse_event_list.txt", "w") as f:
    for item in adverse_event_list:
        f.write(f"{item}\n")

# Aggregate
agg = df.groupby(["Drug_Name", "Adverse_Event"]).sum(numeric_only=True)
agg["Total"] = agg.sum(axis=1)
agg_reset = agg.reset_index().sort_values(by="Total", ascending=False)
print(f"\nNumber of rows in aggregated table: {len(agg_reset)}")

# Normalize %
serious_cols = ["Death", "Hospitalization", "LifeThreatening", "Other", "Total"]
for col in serious_cols:
    agg_reset[f"%{col}"] = agg_reset[col] * 100 / agg_reset.groupby("Drug_Name")[col].transform("sum")

agg_reset = agg_reset.fillna(0)
for col in [f"%{c}" for c in serious_cols]:
    agg_reset[col] = agg_reset[col].round(2)

# Save
if os.path.exists(aes_output_file):
    existing = pd.read_csv(aes_output_file)
    updated = pd.concat([existing, agg_reset], ignore_index=True)
    updated.to_csv(aes_output_file, index=False)
    print(f"\nUpdated AE data appended to: {aes_output_file}")
else:
    agg_reset.to_csv(aes_output_file, index=False)
    print(f"\nNew AE file created: {aes_output_file}")

# Optional chime
audio_file = "./data/clock-chime-88027.mp3"
if os.path.exists(audio_file):
    display(Audio(audio_file, autoplay=True))

# Runtime
elapsed_time = time.time() - start
mins, secs = divmod(elapsed_time, 60)
print(f"\nScript completed in: {int(mins)} min {int(secs)} sec.")
